 -- Objectify, a Objective framework
 -- (c) 2016 Emil Inc. All Rights Reserved.

modes = {
	SINGLE_SELECT = 1,
	MULTI_SELECT = 2,
}

styles = {
	default = function()
		return {
			textView = {
				textColor = "black",
				backgroundColor = "lightGray",
			},
			disabled = {
				textColor = "gray",
				backgroundColor = "lightGray",
			},
			button = {
				normal = {
					textColor = "black",
					backgroundColor = "lightGray",
				},
				disabled = {
					textColor = "gray",
					backgroundColor = "lightGray",
				},
				highlighted = {
					textColor = "white",
					backgroundColor = "lightBlue",
				},
			},
			textInput = {
				textColor = "black",
				backgroundColor = "lightGray",
				placeholderTextColor = "gray",
			},
			dropdown = {
				normal = {
					textColor = "black",
					backgroundColor = "lightGray",
				},
				highlighted = {
					textColor = "white",
					backgroundColor = "lightBlue",
				},
			},
			switch = {
				offState = {
					track = {
						char = string.char(127),
						textColor = "lightGray",
						backgroundColor = "inherit",
					},
					knob = {
						char = " ",
						textColor = "inherit",
						backgroundColor = "gray",
					},
				},
				onState = {
					track = {
						char = " ",
						textColor = "inherit",
						backgroundColor = "lightBlue",
					},
					knob = {
						char = " ",
						textColor = "inherit",
						backgroundColor = "gray",
					},
				},
			},
			selectableList = {
				normal = {
					textColor = "black",
					backgroundColor = "inherit",
				},
				highlighted = {
					textColor = "white",
					backgroundColor = "lightBlue",
				},
				disabled = {
					textColor = "lightGray",
					backgroundColor = "inherit",
				},
			}
		}
	end,
}

internals = {
	setColors = function(styleColors)
		local inheritColors = {
			textColor = term.getTextColor(),
			backgroundColor = term.getBackgroundColor(),
		}
		if styleColors.textColor ~= "inherit" then
			term.setTextColor(colors[styleColors.textColor])
		end
		if styleColors.backgroundColor ~= "inherit" then
			term.setBackgroundColor(colors[styleColors.backgroundColor])
		end
		return inheritColors
	end,
	restoreColors = function(inheritColors)
		if inheritColors.textColor then
			term.setTextColor(inheritColors.textColor)
		end			
		if inheritColors.backgroundColor then
			term.setBackgroundColor(inheritColors.backgroundColor)
		end
	end,
}

function objectManager() -- Object Manager, for storing and easily interacting with objects
	local objectManager = {}
	objectManager.list = {}
	
	objectManager.setObjectList = function(list)
		objectManager.list = list
	end
	
	objectManager.addObject = function(object)
		table.insert(objectManager.list,object)
		return object
	end
	
	objectManager.getObjectList = function()
		return objectManager.list
	end
	
	objectManager.drawAll = function()
		for num,object in pairs(objectManager.list) do
			if object.display then
				object.show()
			end
		end
	end
	
	objectManager.drawByTag = function(tag)
		for num,object in pairs(objectManager.list) do
			if object.tag == tag and object.display then
				object.show()
			end
		end
	end
	
	objectManager.getByTag = function(tag)
		for num,object in pairs(objectManager.list) do
			if object.tag == tag then
				return object
			end
		end
	end
	
	objectManager.removeByTag = function(tag)
		for num,object in pairs(objectManager.list) do
			if object.tag == tag then
				objectManager.list[num] = nil
				return true
			end
		end
		return false
	end

	objectManager.executeOnAll = function(func)
		for num,object in pairs(objectManager.list) do
			func(object)
		end
	end

	objectManager.setGlobalStyle = function(style)
		for num,object in pairs(objectManager.list) do
			object.style = style
		end
	end
	
	return objectManager
end

 -- Creatable objects

createObject = {
	textView = function(tag,x,y,text)
		local object = {}
		if type(tag) == "string" then
			object.tag = tag
			object.posX = x
			object.posY = y
			object.text = tostring(text) or ""
			object.length = object.text:len()
			object.display = true
		elseif type(tag) == "table" then
			object = tag
		end
		object.type = "textView"
		if not object.style then
			object.style = objectify.styles.default()
		end
		
		object.hitbox = {
			startX = object.posX,
			startY = object.posY,
			endX = object.posX + object.length - 1,
			endY = object.posY
		}
		
		object.show = function()
			local inheritColors = internals.setColors(object.style.textView)
			term.setCursorPos(object.posX,object.posY)
			write(object.text)
			internals.restoreColors(inheritColors)
		end
		
		object.setText = function(text)
			object.text = tostring(text) or ""
		end
		
		return object
	end,
		
	button = function(tag,x,y,buttonText,onclick,enabled)
		local object = {}
		if type(tag) == "string" then
			object.tag = tag
			object.posX = x
			object.posY = y
			object.length = tostring(buttonText):len() + 2
			object.buttonText = tostring(buttonText)
			object.enabled = enabled
			object.onClickFunction = onclick
			object.highlighted = false
			object.display = true
		elseif type(tag) == "table" then
			object = tag
		end
		if not object.style then
			object.style = objectify.styles.default()
		end
		if object.enabled == nil then
			object.enabled = true
		end
		object.type = "button"

		object.hitbox = {
			startX = object.posX,
			startY = object.posY,
			endX = object.posX + object.length - 1,
			endY = object.posY
		}
		
		object.show = function()
			local inheritColors = nil
			if object.enabled then
				inheritColors = internals.setColors(object.style.button.normal)
			else
				inheritColors = internals.setColors(object.style.button.disabled)
			end
			term.setCursorPos(object.posX,object.posY)
			write(" "..object.buttonText.." ")
			internals.restoreColors(inheritColors)
			object.highlighted = false
			
			object.hitbox = {
				startX = object.posX,
				startY = object.posY,
				endX = object.posX + object.length - 1,
				endY = object.posY
			}
		end
		
		object.highlight = function()
			if object.enabled and object.display then
				local inheritColors = internals.setColors(object.style.button.highlighted)
				term.setCursorPos(object.posX,object.posY)
				write(" "..object.buttonText.." ")
				internals.restoreColors(inheritColors)
				object.highlighted = true
			end
		end			
		
		object.setText = function(text)
			object.buttonText = tostring(text)
			object.length = object.buttonText:len() + 2
			object.hitbox.endX = object.posX + object.length - 1
		end
		
		object.onClick = function()
			if object.enabled and object.highlighted then
				object.show()
				object.onClickFunction()
			end
		end
		
		return object
	end,
	
	textInput = function(tag,x,y,length,placeholder,hideInput)
		local object = {}
		if type(tag) == "string" then
			object.tag = tag
			object.posX = x
			object.posY = y
			object.length = length
			object.input = ""
			object.placeholder = placeholder
			object.hideInput = hideInput or false
			object.display = true
		elseif type(tag) == "table" then
			object = tag
		end
		object.type = "textInput"
		if not object.style then
			object.style = objectify.styles.default()
		end
		
		object.hitbox = {
			startX = object.posX,
			startY = object.posY,
			endX = object.posX + object.length,
			endY = object.posY
		}
		
		object.show = function()
			local inheritColors = internals.setColors(object.style.textInput)
			paintutils.drawLine(object.posX,object.posY,object.posX + object.length,object.posY,colors[object.style.textInput.backgroundColor])
			term.setCursorPos(object.posX + 1,object.posY)
			if object.input == "" and object.placeholder then
				term.setTextColor(colors[object.style.textInput.placeholderTextColor])
				write(object.placeholder)
			else
				if object.hideInput then
					for i=1,object.input:len() do
						write("\7")
					end
				else
					write(object.input)
				end
			end
			internals.restoreColors(inheritColors)
			
			object.hitbox = {
				startX = object.posX,
				startY = object.posY,
				endX = object.posX + object.length,
				endY = object.posY
			}
		end
		
		object.onClick = function()
			local inheritColors = internals.setColors(object.style.textInput)
			if object.placeholder then
				paintutils.drawLine(object.posX,object.posY,object.posX + object.length,object.posY,colors[object.style.textInput.backgroundColor])
			end
			term.setCursorPos(object.posX + 1,object.posY)
			local replaceChar = nil
			if object.hideInput then
				replaceChar = string.char(7)
			end
			local inputCoroutine = coroutine.create(function() object.input = read(replaceChar) end)
			coroutine.resume(inputCoroutine)
			os.queueEvent("paste",object.input)
			while true do
				local event = {os.pullEventRaw()}
				coroutine.resume(inputCoroutine,table.unpack(event))
				if event[1] == "mouse_click" then
					coroutine.resume(inputCoroutine,"key",keys.enter)
					os.queueEvent(table.unpack(event))
					break
				elseif event[1] == "key" and event[2] == keys.enter then
					break
				end
			end
			internals.restoreColors(inheritColors)
		end
		
		object.getInput = function()
			return object.onClick()
		end
		
		return object
	end,
	
	dropdown = function(tag,x,y,length,maxEntriesShown,entries)
		local object = {}
		if type(tag) == "string" then
			object.tag = tag
			object.posX = x
			object.posY = y
			object.length = length
			object.maxEntriesShown = maxEntriesShown
			object.entries = entries or {}
			object.selected = nil
			object.isExpanded = false
			object.display = true
		elseif type(tag) == "table" then
			object = tag
		end
		object.type = "dropdown"
		if not object.style then
			object.style = objectify.styles.default()
		end
		
		object.hitbox = {
			startX = object.posX,
			startY = object.posY,
			endX = object.posX + object.length,
			endY = object.posY
		}
		
		object.show = function()
			local inheritColors = internals.setColors(object.style.dropdown.normal)
			paintutils.drawLine(object.posX,object.posY,object.posX + object.length,object.posY,colors[object.style.dropdown.normal.backgroundColor])
			term.setCursorPos(object.posX + 1,object.posY)
			if object.selected and object.selected ~= 0 then
				write(string.sub(object.entries[object.selected],1,object.length - 3))
			end
			term.setTextColor(colors.gray)
			term.setCursorPos(object.posX + object.length - 1,object.posY)
			write(string.char(31))
			internals.restoreColors(inheritColors)
			object.isExpanded = false
			
			object.hitbox = {
				startX = object.posX,
				startY = object.posY,
				endX = object.posX + object.length,
				endY = object.posY
			}
		end
		
		object.expand = function()
			paintutils.drawLine(object.posX,object.posY,object.posX + object.length,object.posY,colors.lightBlue)
			term.setTextColor(colors.white)
			term.setCursorPos(object.posX + 1,object.posY)
			if object.selected and object.selected ~= 0 then
				write(string.sub(object.entries[object.selected],1,object.length - 3))
			end
			term.setCursorPos(object.posX + object.length - 1,object.posY)
			write(string.char(31))
			for i=1,object.maxEntriesShown,1 do
				paintutils.drawLine(object.posX,object.posY + i,object.posX + object.length,object.posY + i,colors.lightGray)
				if object.entries[i] then
					term.setCursorPos(object.posX + 1,object.posY + i)
					term.setTextColor(colors.black)
					write(string.sub(object.entries[i],1,object.length - 1))
				end
			end
			object.isExpanded = true
		end
		
		object.setSelected = function(selected)
			if selected > 0 then
				object.selected = selected
			end
		end
		
		object.setSelectedString = function(entry)
			for num,currentEntry in pairs(object.entries) do
				if currentEntry == entry then
					object.selected = num
					return true
				end
			end
			return false
		end
		
		object.getSelected = function()
			return object.entries[object.selected]
		end
		
		object.getNewSelection = function()
			local offset = 0			
			local function redrawEntries()
				for i=1,object.maxEntriesShown,1 do
					paintutils.drawLine(object.posX,object.posY + i,object.posX + object.length,object.posY + i,colors.lightGray)
					if object.entries[i + offset] then
						term.setCursorPos(object.posX + 1,object.posY + i)
						term.setTextColor(colors.black)
						write(string.sub(object.entries[i + offset],1,object.length - 1))
					end
				end
			end
			if object.isExpanded then
				while true do
					local event = {os.pullEvent()}
					if event[1] == "mouse_click" then
						if event[3] >= object.posX and event[3] <= object.posX + object.length and event[4] >= object.posY + 1 and event[4] <= object.posY + object.maxEntriesShown then
							for i=1,object.maxEntriesShown,1 do
								if event[4] == object.posY + i then
									if object.entries[i + offset] then
										return i + offset
									end
								end
							end
						else
							return 0
						end
					elseif event[1] == "mouse_scroll" then
						if event[2] == -1 then
							if offset > 0 then
								offset = offset -1
							end
						elseif event[2] == 1 then
							if #object.entries > offset + object.maxEntriesShown then
								offset = offset + 1
							end
						end
						redrawEntries()
					elseif event[1] == "key" then
						if event[2] == keys.up then
							if offset > 0 then
								offset = offset -1
							end
						elseif event[2] == keys.down then
							if #object.entries > offset + object.maxEntriesShown then
								offset = offset + 1
							end
						end
						redrawEntries()
					end
				end
			end
		end
		
		object.removeFromSet = function(entry)
			if object.entries[entry] then
				if object.selected == entry then
					object.selected = 0
				end
				table.remove(object.entries,entry)
				return true
			end
			return false
		end
		
		return object
	end,
	
	switch = function(tag,x,y,state)
		local object = {}
		if type(tag) == "string" then
			object.tag = tag
			object.posX = x
			object.posY = y
			object.length = 2
			object.state = state or false
			object.display = true
		elseif type(tag) == "table" then
			object = tag
		end
		object.type = "switch"
		if not object.style then
			object.style = objectify.styles.default()
		end
		
		object.hitbox = {
			startX = object.posX,
			startY = object.posY,
			endX = object.posX + object.length,
			endY = object.posY
		}
		
		object.show = function()
			local inheritColors = nil
			term.setCursorPos(object.posX,object.posY)
			if object.state then
				inheritColors = internals.setColors(object.style.switch.onState.track)
				write(object.style.switch.onState.track.char..object.style.switch.onState.track.char)
				internals.restoreColors(inheritColors)
				internals.setColors(object.style.switch.onState.knob)
				write(object.style.switch.onState.knob.char)
			else
				inheritColors = internals.setColors(object.style.switch.offState.knob)
				write(object.style.switch.offState.knob.char)
				internals.restoreColors(inheritColors)
				internals.setColors(object.style.switch.offState.track)
				write(object.style.switch.offState.track.char..object.style.switch.offState.track.char)
			end
			internals.restoreColors(inheritColors)
			
			object.hitbox = {
				startX = object.posX,
				startY = object.posY,
				endX = object.posX + object.length,
				endY = object.posY
			}
		end
		
		object.toggle = function()
			object.state = not object.state
		end
		
		return object
	end,
	
	selectableList = function(tag,x,y,length,mode,entries)
		local object = {}
		if type(tag) == "string" then
			object.tag = tag
			object.posX = x
			object.posY = y
			object.length = length
			object.mode = mode or objectify.modes.SINGLE_SELECT
			object.entries = entries or {}
			object.selected = {}
			object.enabled = true
			object.display = true
		elseif type(tag) == "table" then
			object = tag
		end
		object.type = "selectableList"
		if not object.style then
			object.style = objectify.styles.default()
		end
		
		object.hitbox = {
			startX = object.posX,
			startY = object.posY,
			endX = object.posX + object.length - 1,
			endY = object.posY + #object.entries - 1
		}
		
		object.show = function()
			local inheritColors = internals.setColors(object.style.selectableList.normal)
			for i=1,#object.entries do
				if object.entries[i] then
					term.setCursorPos(object.posX,object.posY + i - 1)
					if object.enabled then
						internals.setColors(object.style.selectableList.normal)
						for i2=1,#object.selected do
							if object.selected[i2] == i then
								paintutils.drawLine(object.posX,object.posY + i - 1,object.hitbox.endX,object.posY + i - 1,colors[object.style.selectableList.highlighted.backgroundColor])
								term.setCursorPos(object.posX,object.posY + i - 1)
								internals.setColors(object.style.selectableList.highlighted)
								break
							end
						end
						write(" "..object.entries[i].." ")
					else
						internals.setColors(object.style.selectableList.disabled)
						write(" "..object.entries[i].." ")
					end
				end
				internals.restoreColors(inheritColors)
			end
			
			object.hitbox = {
				startX = object.posX,
				startY = object.posY,
			}
			object.recalculateHitbox()
		end
		
		object.recalculateHitbox = function()
			local lL = 0
			for i=1,#object.entries do
				if object.entries[i]:len() > lL then
					lL = object.entries[i]:len()
				end
			end
			object.hitbox.endX = object.posX + lL + 1
			object.hitbox.endY = object.posY + #object.entries - 1
		end
		
		object.toggleSelected = function(cy)
			if object.enabled then
				local clickPos = cy - object.posY + 1
				if object.mode == objectify.modes.MULTI_SELECT then
					table.insert(object.selected,clickPos)
					for i=1,#object.selected do
						if object.selected[i] == clickPos then
							table.remove(object.selected,clickPos)
							return false
						end
					end
					return true
				elseif object.mode == objectify.modes.SINGLE_SELECT then
					object.selected = {clickPos}
					return true
				end
			end
		end
		
		object.insertEntry = function(name)
			if name and type(name) == "string" then
				table.insert(object.entries,name)
				object.recalculateHitbox()
			end
		end
		
		return object
	end
}
