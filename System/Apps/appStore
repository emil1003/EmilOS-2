 --EmilOS App Store
local version = 2.0
 --(c) 2016 Emil Inc. All Rights Reserved.
 
 --Locals
local tArgs = {...}
local selectedApp = nil
local appManifests = {}
local installedApps = {}
local shownApps = {}
local buttonText = nil

local settings = framework.getSettings()

if multishell then
	multishell.setTitle(multishell.getCurrent(),langStrings.appstore_appname)
end

 --Functions
local function printCentered(text, y)
    local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
    print(text)
	return x, x + text:len() - 1
end
local function refreshList()
	term.setBackgroundColor(colors[settings.menuBackground] or colors.white)
	term.setTextColor(colors[settings.menuText] or colors.black)
	local x, xLen = printCentered("  "..langStrings.appstore_refreshing.."  ",9)
	paintutils.drawLine(x,8,xLen,8,colors[settings.menuBackground] or colors.white)
	paintutils.drawLine(x,10,xLen,10,colors[settings.menuBackground] or colors.white)
	local responseHandle = http.get("http://"..settings.serverUrl.."/EmilOS/getAppStoreList.php")
	if responseHandle then
		appManifests = textutils.unserialize(responseHandle.readAll())
		local file = fs.open("System/temp/appStore","w")
		file.write(textutils.serialize(appManifests))
		file.close()
		return true
	else
		emilworks.popupMsg(colors.lime,"1","",langStrings.appstore_noresponse)
		return false
	end
end
local function drawInterface()
	for i=2,19 do
		paintutils.drawLine(1,i,51,i,colors[settings.background])
	end
	term.setTextColor(colors[settings.topBarTextColor] or colors.black)
	paintutils.drawLine(1,1,51,1,colors[settings.topBarColor])
	term.setCursorPos(3,1)
	write(langStrings.appstore_appname)
	term.setTextColor(colors.black)
end
local function drawInterface1()
	term.setTextColor(colors.lightGray)
	term.setCursorPos(4,3)
	write(langStrings.appstore_listbar)
	term.setCursorPos(3,4)
	for i=1,23 do
		write("-")
	end
	term.setTextColor(colors.black)
end
local function getInstalledApps()
	installedApps = {}
	for k,v in pairs(fs.list("Apps/")) do
		if v ~= "data" and fs.exists("Apps/"..v.."/application.manifest") then
			local appManifest = framework.getManifest(v)
			installedApps[v] = appManifest.version
		end
	end
	installedApps["System"] = _EMILOS_VERSION
end
local function drawAppDetails()
	paintutils.drawLine(28,6,49,6,colors.white)
	term.setCursorPos(28,8)
	term.setTextColor(colors.lightGray)
	term.setBackgroundColor(colors.white)
	for i=28,49 do
		write("-")
	end
	term.setCursorPos(29,4)
	term.setTextColor(colors.black)
	write(selectedApp.."     ")
	term.setCursorPos(29,6)
	term.setBackgroundColor(colors.lightGray)
	buttonText = nil
	if installedApps[selectedApp] and installedApps[selectedApp] < appManifests[selectedApp].version then
		buttonText = langStrings.appstore_buttonupdate
	elseif not installedApps[selectedApp] then
		buttonText = langStrings.appstore_buttoninstall
	end
	if buttonText then
		write(" "..buttonText.." ")
	end
	if not _HOST then
		local image = appManifests[selectedApp].icon.lowRes
		paintutils.drawImage(image,45,4)
	elseif blittle then
		local image = blittle.shrink(appManifests[selectedApp].icon.highRes,colors.white)
		blittle.draw(image,45,4)
	end
end
local function drawAppList()
	shownApps = {}
	if selectedApp then
		for i=5,18 do
			paintutils.drawLine(3,i,25,i,colors.white)
		end
	end
	term.setTextColor(colors.black)
	local i = 5
	for k,v in pairs(appManifests) do
		if i >= 5 and i <= 17 then
			term.setBackgroundColor(colors.white)
			term.setTextColor(colors.black)
			if v.name == selectedApp then
				paintutils.drawLine(3,i,25,i,colors[settings.menuHighlight] or colors.lightBlue)
				term.setTextColor(colors.white)
			end
			term.setCursorPos(4,i)
			write(v.name)
			term.setCursorPos(12,i)
			if installedApps[v.name] then
				write(installedApps[v.name])
			else
				write("-")
			end
			term.setCursorPos(19,i)
			write(v.version)
			table.insert(shownApps,v.name)
		end
		i = i + 1
	end
end
local function downloadApp()
	local listHandle = http.get("http://"..settings.serverUrl.."/EmilOS/apps/"..selectedApp.."/files.list")
	if listHandle then
		local list = textutils.unserialize(listHandle.readAll())
		for i=1,#list do
			local fileHandle = nil
			fileHandle = http.get("http://"..settings.serverUrl.."/EmilOS/apps/"..selectedApp.."/"..list[i])
			if fileHandle then
				if not fs.exists("Apps/"..selectedApp) then
					fs.makeDir("Apps/"..selectedApp)
				end
				local file = fs.open("Apps/"..selectedApp.."/"..list[i],"w")
				file.write(fileHandle.readAll())
				file.close()
			else
				fs.delete("Apps/"..selectedApp)
				return false
			end
		end
		return true
	end
end
local function drawAllInterface()
	drawInterface()
	for i=3,18 do
		paintutils.drawLine(3,i,25,i,colors.white)
	end
	drawInterface1()
	drawAppList()
	for i=3,18 do
		paintutils.drawLine(28,i,49,i,colors.white)
	end
	if selectedApp then
		drawAppDetails()
	end
end

drawInterface()
getInstalledApps()
if not fs.exists("System/temp/appStore") then
	if not refreshList() then
		return
	end
else
	local file = fs.open("System/temp/appStore","r")
	appManifests = textutils.unserialize(file.readAll())
	file.close()
end
if tArgs[1] then
	if tArgs[1] ~= "SysUpd" then
		for k,v in pairs(appManifests) do
			if v.name == tArgs[1] then
				selectedApp = tArgs[1]
			end
		end
	end
end
drawAllInterface()

while true do
	e, but, cx, cy = framework.eventHandler()
	if e == "mouse_click" or e == "key" and but == keys.leftCtrl then
		if e == "key" then
			cx, cy = 0, 0
		end
		if cx >= 3 and cx <= langStrings.appstore_appname:len() + 2 and cy == 1 or e == "key" and but == keys.leftCtrl then
			term.setCursorPos(2,1)
			term.setBackgroundColor(colors[settings.menuHighlight] or colors.lightBlue)
			term.setTextColor(colors.white)
			write(" "..langStrings.appstore_appname.." ")
			cB = framework.menu({langStrings.appstoremenu_about,"br",langStrings.appstoremenu_refresh,"br",langStrings.appstoremenu_exit})
			if cB == 1 then
				emilworks.popupMsg(colors.lime,"3","",langStrings.appstore_appname.." "..version,"","(c) 2016 Emil Inc.")
				parallel.waitForAny(function() os.pullEvent("mouse_click") end,function() os.pullEvent("key") end)
				drawAllInterface()
			elseif cB == 3 then
				drawInterface()
				refreshList()
				drawAllInterface()
			elseif cB == 5 then
				return
			else
				drawAllInterface()
			end
		elseif cx >= 3 and cx <= 25 and cy >= 5 and cy <= 17 then
			for i=1,#shownApps do
				if cx >= 3 and cx <= 25 and cy == 4 + i then
					selectedApp = shownApps[i]
					drawAppList()
					drawAppDetails()
				end
			end
		elseif buttonText and selectedApp then
			if cx >= 29 and cx <= 31 + buttonText:len() and cy == 6 then
				if downloadApp() then
					getInstalledApps()
					drawAllInterface()
				end
			end
		end
	elseif e == "framework_redraw" or e == "framework_fullRedraw" then
		drawAllInterface()
	elseif e == "frameworkCloseProgram" then
		if multishell.getCount() == 1 then
			drawAllInterface()
		end
	end
end