 --EmilOS 2
local version = 2.03
local versionText = "2.0 Alpha.3"
 --(c) 2016 Emil Inc. All Rights Reserved

 --Locals
local appX = {5,15,25,35,45,5,15,25,35,45}
local appY = {3,11}
local nSidebarPage = 1
local clicked = false
local currentMessages = {}
local newBoot = true
local appListNum = 10
local currentAppList = {}
local appsWindow = nil
local sidebarWindow = nil
local systemIcons = {
	["Default"]={{1,1,1,1,},{1,1,1,1,256,},{1,1,1,1,256,256,},{1,1,1,1,1,1,},{1,1,1,1,1,1,},{1,1,1,1,1,1,},{1,1,1,1,1,1,},{1,1,1,1,1,1,},{1,1,1,1,1,1,},},
	["Disk"]={{8,256,256,256,8,},{8,256,256,256,8,},{8,256,256,256,8,8,},{8,8,8,8,8,8,},{8,8,8,8,8,8,},{8,1,1,1,1,8,},{8,1,1,1,1,8,},{8,1,1,1,1,8,},{8,8,8,8,8,8,},},
	["CD"]={{0,0,32768,32768,0,0,},{0,32768,128,128,32768,0,},{0,32768,128,128,32768,0,},{32768,128,128,128,128,32768,},{32768,128,128,128,128,32768,},{32768,128,128,128,128,32768,},{0,32768,128,128,32768,0,},{0,32768,128,128,32768,0,},{0,0,32768,32768,0,0,},},
}
local thisWindow = term.current()
local currentRunningThread = nil
local programWindow = nil
local programFocused = false
local runningProgramName = nil

local selectedApp = nil
local selectedAppBut = nil

 --System apps window managing
local floatingSystemApps = {}

_G.EmilOS = true
_G._EMILOS_VERSION = version
_G.customFunctions = {}
_G._EMILOS_WINDOWS_ENABLED = true

 --Load Settings and run some startup scripts
local settings = framework.getSettings()

if not settings.dontCheckOnStartup then
	framework.httpRequest("http://"..settings.serverUrl.."/EmilOSScript.php","request=GetAppList1")
end
if settings.openRednetOnBoot then
	for k,v in pairs(rs.getSides()) do
		if peripheral.getType(v) == "modem" then
			rednet.open(v)
		end
	end
end
if fs.exists("/System/customEvents") then
	file = fs.open("/System/customEvents","r")
	_G.registeredEvents = textutils.unserialize(file.readAll())
	file.close()
else
	_G.registeredEvents = {}
end
if fs.exists("/System/temp") then
	fs.delete("/System/temp")
end
fs.makeDir("/System/temp")

 --Run apps that has runOnBoot set to true in application.manifest
for k,v in pairs(fs.list("Apps/")) do
	if v ~= "data" then
		local appManifest = framework.getManifest(v)
		if appManifest.runOnBoot then
			shell.run("/Apps/"..v.."/"..appManifest.launchScript,"onBoot")
		end
	end
end

 --Functions
local function getInstalledApps()
	loadedApps = {}
	for k,v in pairs(fs.list("/Apps")) do
		if fs.isDir("/Apps/"..v) and v ~= "data" then
			if fs.exists("/Apps/"..v.."/application.manifest") then
				local appManifest = framework.getManifest(v)
				table.insert(loadedApps,appManifest.name)
			end
		end
	end
	for k,v in pairs(rs.getSides()) do
		if disk.isPresent(v) then
			if disk.hasAudio(v) then
				table.insert(loadedApps,"CD")
			else
				table.insert(loadedApps,"Disk")
			end
		end
	end
end
local function drawMainBar()
	paintutils.drawLine(1,1,51,1,colors[settings.topBarColor] or colors.white)
	term.setCursorPos(3,1)
	term.setTextColor(colors[settings.topBarTextColor] or colors.black)
	write("EmilOS")
	term.setCursorPos(11,1)
	if isGettingData then
		term.setTextColor(colors.lightGray)
		write("-")
	elseif _G.EmilOSServerUnreachable then
		term.setTextColor(colors.red)
		write("*")
	else
		term.setTextColor(colors[settings.topBarTextColor] or colors.black)
		write("*")
	end
	paintutils.drawLine(30,1,45,1,colors[settings.topBarColor] or colors.white)
	term.setCursorPos(45 - textutils.formatTime(os.time(),settings.fullClock):len(),1)
	term.setTextColor(colors[settings.topBarTextColor] or colors.black)
	write(textutils.formatTime(os.time(),settings.fullClock))
	term.setCursorPos(47,1)
	write(string.char(12))
	term.setCursorPos(50,1)
	write("=")
	term.setTextColor(colors.black)
end
local function drawClock()
	if oldClock and oldClock ~= textutils.formatTime(os.time(),settings.fullClock) then
		paintutils.drawLine(30,1,45,1,colors[settings.topBarColor] or colors.white)
		term.setCursorPos(45 - textutils.formatTime(os.time(),settings.fullClock):len(),1)
		term.setTextColor(colors[settings.topBarTextColor] or colors.black)
		write(textutils.formatTime(os.time(),settings.fullClock))
		oldClock = textutils.formatTime(os.time(),settings.fullClock)
	else
		oldClock = textutils.formatTime(os.time(),settings.fullClock)
	end
	ClockID = os.startTimer(0.2)
end
local function drawApps(forceRedraw)
	currentAppList = {}
	for i=appListNum - 9, appListNum do
		table.insert(currentAppList,loadedApps[i])
	end
	
	if not appsWindow or forceRedraw then
		if not appsWindow then
			appsWindow = window.create(term.current(),1,2,51,18)
		end
		local previousWindow = term.redirect(appsWindow)
		term.setBackgroundColor(colors[settings.background] or colors.gray)
		term.clear()
		for i=1,#currentAppList do
			if currentAppList[i] ~= nil and currentAppList[i] ~= "Disk" and currentAppList[i] ~= "CD" then
				local appManifest = framework.getManifest(currentAppList[i])
				if appManifest.icon.lowRes or appManifest.icon.highRes then
					if not _HOST or not blittle or not appManifest.icon.highRes then
						image = appManifest.icon.lowRes
						if i <= 5 then
							paintutils.drawImage(image,appX[i],appY[1])
						else
							paintutils.drawImage(image,appX[i],appY[2])
						end
					elseif _HOST and blittle then
						local a = blittle.shrink(appManifest.icon.highRes,colors[settings.background])
						if i <= 5 then
							blittle.draw(a,appX[i],appY[1])
						else
							blittle.draw(a,appX[i],appY[2])
						end
					end
				else
					if _HOST and blittle then
						local a = blittle.shrink(systemIcons.Default,colors[settings.background])
						if i <= 5 then
							blittle.draw(a,appX[i],appY[1])
						else
							blittle.draw(a,appX[i],appY[2])
						end
					end
				end
				if i <= 5 then
					term.setCursorPos(appX[i] - 1,appY[1] + 3)
				else
					term.setCursorPos(appX[i] - 1,appY[2] + 3)
				end
				term.setBackgroundColor(colors[settings.background])
				if settings.background ~= "white" then
					term.setTextColor(colors.white)
				else
					term.setTextColor(colors.black)
				end
				if appManifest.name:len() <= 3 then
					local x, y = term.getCursorPos()
					term.setCursorPos(x + 1,y)
				end
				write(appManifest.name)
			elseif currentAppList[i] == "Disk" or currentAppList[i] == "CD" then
				if _HOST and blittle then
					local a = nil
					if currentAppList[i] == "Disk" then
						a = blittle.shrink(systemIcons.Disk,colors[settings.background])
					else
						a = blittle.shrink(systemIcons.CD,colors[settings.background])
					end
					if i <= 5 then
						blittle.draw(a,appX[i],appY[1])
					else
						blittle.draw(a,appX[i],appY[2])
					end
				end
				if i <= 5 then
					term.setCursorPos(appX[i] - 1,appY[1] + 3)
				else
					term.setCursorPos(appX[i] - 1,appY[2] + 3)
				end
				term.setBackgroundColor(colors[settings.background])
				if settings.background ~= "white" then
					term.setTextColor(colors.white)
				else
					term.setTextColor(colors.black)
				end
				write(currentAppList[i])
			end
		end
		if appListNum ~= 10 then
			term.setCursorPos(1,10)
			if settings.background ~= "white" then
				term.setTextColor(colors.white)
			else
				term.setTextColor(colors.black)
			end
			write("<")
		end
		if #loadedApps > appListNum then
			term.setCursorPos(51,10)
			if settings.background ~= "white" then
				term.setTextColor(colors.white)
			else
				term.setTextColor(colors.black)
			end
			write(">")
		end
		
		term.redirect(previousWindow)
	end
	appsWindow.redraw()
end
local function drawMain(endWithMain)
	if programFocused then
		programWindow.redraw()
	else
		framework.clearPopup()
		drawMainBar()
		drawApps()
		if not endWithMain then
			if currentRunningThread then
				programWindow.redraw()
			end
		end
		if #floatingSystemApps > 0 then
			local drawLast = nil
			for k,v in pairs(floatingSystemApps) do
				if not v.isFocused then
					v.containerWindow.redraw()
				else
					drawLast = v.containerWindow
				end
			end
			if drawLast then
				drawLast.redraw()
			else
				floatingSystemApps[1]["isFocused"] = true
			end
		end
		if endWithMain then
			if currentRunningThread then
				programWindow.redraw()
			end
		end
	end
end
local function round(num, idp)
	local mult = 10^(idp or 0)
	return math.floor(num * mult + 0.5) / mult
end
local function printCentered(text, y)
    local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
    print(text)
end
local function showContext()
	if selectedApp == "Disk" then
		if cx <= 42 then
			conX, conY = cx + 1, cy
		else
			conX, conY = cx - 10,cy
		end
	else
		if cx <= 30 then
			conX, conY = cx + 1, cy
		else
			conX, conY = cx - 17,cy
		end
	end
	if selectedApp == "Disk" then
		for i=0,3 do
			paintutils.drawLine(conX,conY + i,conX + 9,conY + i,colors[settings.menuBackground] or colors.white)
		end
	else
		for i=0,5 do
			paintutils.drawLine(conX,conY + i,conX + 16,conY + i,colors[settings.menuBackground] or colors.white)
		end
	end
	if selectedApp == "Disk" then
		term.setTextColor(colors[settings.menuText] or colors.black)
		term.setCursorPos(conX + 1,conY + 1)
		write(langStrings.context_disk_start)
		term.setCursorPos(conX + 1,conY + 2)
		write(langStrings.context_disk_eject)
		if not settings.dontDoMenuShadows then
			paintutils.drawLine(conX + 1,conY + 4,conX + 9,conY + 4,colors.black)
			paintutils.drawLine(conX + 10,conY + 1,conX + 10,conY + 4,colors.black)
		end
		while true do
			e, but, cx, cy = framework.eventHandler()
			if e == "mouse_click" then
				if cx >= conX and cx <= conX + 9 and cy == conY + 1 and fs.exists("Apps/Filer") then
					paintutils.drawLine(conX,conY + 1,conX + 9,conY + 1,colors[settings.menuHighlight] or colors.lightBlue)
					term.setTextColor(colors.white)
					term.setCursorPos(conX + 1,conY + 1)
					write(langStrings.context_disk_start)
					sleep(0.2)
					shell.run("Apps/Filer","disk","getFile","program")
					while true do
						e, par1 = framework.eventHandler()
						if e == "Filer" then
							if par1 ~= false then
								shell.run(par1)
							end
							break
						end
					end
				elseif cx >= conX and cx <= conX + 9 and cy == conY + 2 then
					paintutils.drawLine(conX,conY + 2,conX + 9,conY + 2,colors[settings.menuHighlight] or colors.lightBlue)
					term.setTextColor(colors.white)
					term.setCursorPos(conX + 1,conY + 2)
					write(langStrings.context_disk_eject)
					sleep(0.2)
					for k,v in pairs(rs.getSides()) do
						if peripheral.getType(v) == "drive" then
							disk.eject(v)
						end
					end
					for i=1,#loadedApps do
						if loadedApps[i] == "Disk" then
							table.remove(loadedApps,i)
						end
					end
				end
				break
			elseif e == "timer" and but == ClockID then
				drawClock()
			end
		end
	else
		term.setTextColor(colors[settings.menuText] or colors.black)
		term.setCursorPos(conX + 1,conY + 1)
		write(langStrings.context_appstore)
		term.setCursorPos(conX + 1,conY + 2)
		if not multishell then
			term.setTextColor(colors[settings.menuInactive] or colors.lightGray)
		end
		write(langStrings.context_openintab)
		term.setTextColor(colors[settings.menuText] or colors.black)
		term.setCursorPos(conX,conY + 3)
		term.setTextColor(colors[settings.menuInactive] or colors.lightGray)
		write("-----------------")
		term.setCursorPos(conX + 1,conY + 4)
		term.setTextColor(colors[settings.menuText] or colors.black)
		write(langStrings.context_properties)
		if not settings.dontDoMenuShadows then
			if multishell then
				paintutils.drawLine(conX + 1,conY + 6,conX + 16,conY + 6,colors.black)
				paintutils.drawLine(conX + 17,conY + 1,conX + 17,conY + 6,colors.black)
			else
				paintutils.drawLine(conX + 1,conY + 5,conX + 16,conY + 5,colors.black)
				paintutils.drawLine(conX + 17,conY + 1,conX + 17,conY + 5,colors.black)
			end
		end
		while true do
			e, but, cx, cy = framework.eventHandler()
			if e == "mouse_click" then
				if cx >= conX and cx <= conX + 16 and cy == conY + 1 then
					paintutils.drawLine(conX,conY + 1,conX + 16,conY + 1,colors[settings.menuHighlight] or colors.lightBlue)
					term.setTextColor(colors.white)
					term.setCursorPos(conX + 1,conY + 1)
					write(langStrings.context_appstore)
					sleep(0.2)
					shell.run("System/Apps/appStore",selectedApp)
				elseif cx >= conX and cx <= conX + 16 and cy == conY + 2 and multishell then
					paintutils.drawLine(conX,conY + 2,conX + 16,conY + 2,colors[settings.menuHighlight] or colors.lightBlue)
					term.setTextColor(colors.white)
					term.setCursorPos(conX + 1,conY + 2)
					write(langStrings.context_openintab)
					sleep(0.2)
					framework.clearPopup()
					local appManifest = framework.getManifest(selectedApp)
					if fs.exists("Apps/"..selectedApp.."/"..appManifest.launchScript) then
						multishell.setTitle(shell.openTab("Apps/"..selectedApp.."/"..appManifest.launchScript),selectedApp)
					end
				elseif cx >= conX and cx <= conX + 16 and cy == conY + 4 then
					paintutils.drawLine(conX,conY + 4,conX + 16,conY + 4,colors[settings.menuHighlight] or colors.lightBlue)
					term.setTextColor(colors.white)
					term.setCursorPos(conX + 1,conY + 4)
					write(langStrings.context_properties)
					sleep(0.2)
					framework.clearPopup()
					appsWindow.redraw()
					local appManifest = framework.getManifest(selectedApp)
					local propertiesWindow = window.create(term.current(),4,20,46,16)
					local previousWindow = term.redirect(propertiesWindow)
					term.setBackgroundColor(colors[settings.menuBackground] or colors.white)
					term.clear()
					if not settings.dontDoMenuShadows then
						term.setCursorPos(46,1)
						term.setBackgroundColor(colors[settings.background])
						write(" ")
						paintutils.drawLine(46,2,46,16,colors.black)
					else
						paintutils.drawLine(46,1,46,16,colors[settings.background])
					end
					term.setBackgroundColor(colors[settings.menuBackground] or colors.white)
					term.setTextColor(colors[settings.menuText] or colors.black)
					term.setCursorPos(3,2)
					write(appManifest.name)
					term.setTextColor(colors[settings.menuInactive] or colors.lightGray)
					term.setCursorPos(3,4)
					write("Version "..appManifest.version)
					term.setCursorPos(3,6)
					term.setBackgroundColor(colors.lightGray)
					term.setTextColor(colors.black)
					write(" "..langStrings.context_properties_more.." ")
					term.setBackgroundColor(colors[settings.menuBackground] or colors.white)
					term.setTextColor(colors[settings.menuText] or colors.black)
					term.setCursorPos(3,8)
					local dataSize = 0
					if fs.exists("Apps/data/"..selectedApp) then
						for k,v in pairs(fs.list("Apps/data/"..selectedApp)) do
							dataSize = dataSize + fs.getSize("Apps/data/"..selectedApp.."/"..v)
						end
					end
					write("Data: "..dataSize.." B")
					term.setBackgroundColor(colors.lightGray)
					term.setTextColor(colors.black)
					term.setCursorPos(3,15)
					write(" "..langStrings.context_properties_uninstall.." ")
					if appManifest.icon.lowRes or appManifest.icon.highRes then
						if not _HOST or not blittle or not appManifest.icon.highRes then
							local image = appManifest.icon.lowRes
							paintutils.drawImage(image,41,2)
						elseif _HOST and blittle then
							local image = blittle.shrink(appManifest.icon.highRes,colors[settings.menuBackground] or colors.white)
							blittle.draw(image,41,2)
						end
					else
						image = {
							{
								1,1,
							},
							{
								1,1,1,
							},
							{
								1,1,1,
							},
						}
						paintutils.drawImage(image,41,2)
					end
					term.redirect(previousWindow)
					if not settings.noAnim then
						for i=18,14,-2 do
							propertiesWindow.reposition(4,i)
							sleep(0.05)
						end
					end
					propertiesWindow.reposition(4,13)
					local propertiesExpanded = false
					local expanderModifier = 0
					drawClock()
					while true do
						local e, but, cx, cy = framework.eventHandler()
						if e == "mouse_click" then
							if cx >= 4 and cx <= 48 and cy >= 13 - expanderModifier then
								if cx >= 6 and cx <= 8 + langStrings.context_properties_more:len() and cy == 18 then
									if not propertiesExpanded then
										local previousWindow = term.redirect(propertiesWindow)
										paintutils.drawLine(1,6,44,6,colors[settings.menuBackground] or colors.white)
										term.redirect(previousWindow)									
										propertiesExpanded = true
										expanderModifier = 9									
										if not settings.noAnim then
											for i=11,5,-2 do
												propertiesWindow.reposition(4,i)
												sleep(0.05)
											end
										end
										propertiesWindow.reposition(4,4)
										if settings.noAnim then
											propertiesWindow.redraw()
										end
										drawClock()
									else
										if emilworks.popupMsg(colors.lime,"6","","Vil du afinstallere",selectedApp.."?") then
											fs.delete("Apps/"..selectedApp)
											getInstalledApps()
											drawApps(true)
										end
										break
									end
								end
							else
								if not settings.noAnim then
									local firstRun = true
									if propertiesExpanded then
										for i=6,20,2 do
											if not firstRun then
												sleep(0.05)
											else
												firstRun = false
											end
											appsWindow.redraw()
											propertiesWindow.reposition(4,i)
										end
									else
										for i=15,19,2 do
											if not firstRun then
												sleep(0.05)
											else
												firstRun = false
											end
											appsWindow.redraw()
											propertiesWindow.reposition(4,i)
										end
										propertiesWindow.reposition(4,20)
									end
								else
									propertiesWindow.reposition(4,20)
								end
								if cy == 1 then
									os.queueEvent("mouse_click",but,cx,cy)
								end
								break
							end
						elseif e == "key" then
							if not settings.noAnim then
								local firstRun = true
								if propertiesExpanded then
									for i=6,20,2 do
										if not firstRun then
											sleep(0.05)
										else
											firstRun = false
										end
										appsWindow.redraw()
										propertiesWindow.reposition(4,i)
									end
								else
									for i=15,19,2 do
										if not firstRun then
											sleep(0.05)
										else
											firstRun = false
										end
										appsWindow.redraw()
										propertiesWindow.reposition(4,i)
									end
									propertiesWindow.reposition(4,20)
								end
							else
								propertiesWindow.reposition(4,20)
							end
							if but == keys.leftCtrl then
								os.queueEvent("mouse_click",but,3,1)
							elseif but == 157 then
								os.queueEvent("mouse_click",but,50,1)
							elseif but == 15 then
								os.queueEvent("mouse_click",but,47,1)
							end
							break
						elseif e == "disk" or e == "disk_eject" then
							getInstalledApps()
							drawApps(true)
							propertiesWindow.redraw()
						elseif e == "timer" and but == ClockID then
							drawClock()
						end
					end
				end
				break
			elseif e == "timer" and but == ClockID then
				drawClock()
			end
		end
	end
end
local function openSidebar(bSidebarIsOpen)
	if not sidebarWindow then
		sidebarWindow = window.create(term.current(),37,2,15,18,false)
	end
	local previousWindow = term.redirect(sidebarWindow)
	term.setBackgroundColor(colors.lightGray)
	term.clear()
	if nSidebarPage == 1 then
		term.setTextColor(colors.white)
		messages = framework.messageHandler("load")
		currentMessages = {}
		term.setCursorPos(2,1)
		local times = 0
		for k,v in pairs(messages) do
			times = times + 1
			if times <= 3 then
				local x,y = term.getCursorPos()
				table.insert(currentMessages,v["title"])
				term.setCursorPos(2,y + 1)
				write(v["title"])
				term.setCursorPos(14,y + 1)
				write("x")
				term.setCursorPos(2,y + 2)
				write("-------------")
				term.setCursorPos(2,y + 3)
				write(v["textLine1"])
				if v["textLine2"] then
					term.setCursorPos(2,y + 4)
					write(v["textLine2"])
				end
				term.setCursorPos(2,y + 5)
			end
		end
	elseif nSidebarPage == 2 then
		term.setTextColor(colors.white)
		term.setCursorPos(2,2)
		write(langStrings.sidebar_devices)
		local writeY = 1
		for k,v in pairs(rs.getSides()) do
			if peripheral.getType(v) then
				term.setCursorPos(2,3 + writeY)
				local p = peripheral.getType(v)
				write(string.sub(p,1,1):upper()..string.sub(p,2,13))
				if p == "modem" then
					term.setCursorPos(12,3 + writeY)
					if rednet.isOpen(v) then
						term.setBackgroundColor(colors.lime)
						write("  ")
						term.setBackgroundColor(colors.white)
						write(" ")
					else
						term.setBackgroundColor(colors.white)
						write(" ")
						term.setBackgroundColor(colors.red)
						write("  ")
					end
					modemPosY = 4 + writeY
				elseif p == "drive" and disk.isPresent(v) then
					term.setCursorPos(12,3 + writeY)
					term.setBackgroundColor(colors.lightBlue)
					if _HOST then
						write(" \30 ")
					else
						write(" ^ ")
					end
				end
				term.setBackgroundColor(colors.lightGray)			
				term.setTextColor(colors.white)
				writeY = writeY + 1
			end
		end
	elseif nSidebarPage == 3 then
		term.setTextColor(colors.white)
		term.setCursorPos(2,2)
		write(langStrings.sidebar_music)
		term.setCursorPos(2,4)
		cdIsPresent = nil
		for k,v in pairs(rs.getSides()) do
			if disk.isPresent(v) then
				if disk.hasAudio(v) then
					cdIsPresent = v
				end
			end
		end
		if cdIsPresent then
			write(string.sub((disk.getAudioTitle(cdIsPresent) or langStrings.sidebar_unknown),1,13))
			term.setCursorPos(4,6)
			if _HOST then
				write("\16   \143   \30")
			else
				write(">   O   ^")
			end
		else
			write(langStrings.sidebar_nodisc)
		end
	end
	term.setCursorPos(5,17)
	term.setTextColor(colors.gray)
	if nSidebarPage == 1 then
		term.setTextColor(colors.white)
	end
	write("o  ")
	term.setTextColor(colors.gray)
	if nSidebarPage == 2 then
		term.setTextColor(colors.white)
	end
	write("o  ")
	term.setTextColor(colors.gray)
	if nSidebarPage == 3 then
		term.setTextColor(colors.white)
	end
	write("o")
	term.redirect(previousWindow)
	if not bSidebarIsOpen then
		framework.clearPopup()
		sidebarWindow.setVisible(true)
		local sidebarFirsttime = true
		if not settings.noAnim then
			for i=-1,-13,-2 do
				if sidebarFirsttime then
					sidebarFirsttime = false
				else
					sleep(0.05)
				end
				sidebarWindow.redraw()
				appsWindow.reposition(i,2)
			end
			appsWindow.reposition(-14,2)
			sidebarWindow.redraw()
		else
			appsWindow.reposition(-14,2)
			sidebarWindow.redraw()
		end
	else
		appsWindow.reposition(-14,2)
		sidebarWindow.redraw()
	end
end
local function showSearchBar()
	local appList = {langStrings.appstore_appname,langStrings.settings_appname,langStrings.emilosmenu_shell,langStrings.emilosmenu_shutdown,langStrings.emilosmenu_reboot}
	local searchString = ""
	local returnList = {}
	local didDoShadows = false
	if not settings.noAnim then
		for i=3,11,2 do
			appsWindow.reposition(1,i)
			paintutils.drawLine(1,i,51,i,colors[settings.topBarColor] or colors.white)
			paintutils.drawLine(1,i - 1,51,i - 1,colors[settings.topBarColor] or colors.white)
			sleep(0.05)
		end
	end
	appsWindow.reposition(1,11)
	for i=2,4 do
		paintutils.drawLine(1,i,51,i,colors[settings.topBarColor] or colors.white)
	end
	drawClock()
	for k,v in pairs(loadedApps) do
		table.insert(appList,v)
	end
	local function findMatches(list,sString)
		returnList = {}
		term.setCursorBlink(false)
		for i=1,#list do
			if string.sub(list[i]:lower(),1,sString:len()) == sString:lower() then
				table.insert(returnList,list[i])
			end
		end
		for i=1,6 do
			paintutils.drawLine(11,4 + i,42,4 + i,colors[settings.topBarColor] or colors.white)
		end
		drawClock()
		term.setTextColor(colors[settings.menuText] or colors.black)
		for i=1,5 do
			if returnList[i] then
				term.setCursorPos(13,4 + i)
				write(returnList[i])
			end
		end
		if returnList[1] == langStrings.appstore_appname then
			returnList[1] = "appStore"
		elseif returnList[1] == langStrings.settings_appname then
			returnList[1] = "settings"
		end
		if returnList[1] and returnList[1]:len() <= 18 then
			term.setTextColor(colors[settings.menuInactive] or colors.lightGray)
			if fs.exists("Apps/"..returnList[1]) or fs.exists("System/Apps/"..returnList[1]) then
				term.setCursorPos(41 - langStrings.emilos_search_program:len(),5)
				write(langStrings.emilos_search_program)
			else
				term.setCursorPos(41 - langStrings.emilos_search_command:len(),5)
				write(langStrings.emilos_search_command)
			end
			term.setTextColor(colors[settings.menuText] or colors.black)
		end
		if sString:len() > 27 then
			term.setCursorPos(40,3)
		else
			term.setCursorPos(13 + sString:len(),3)
		end
		term.setCursorBlink(true)
	end
	term.setCursorPos(13,3)
	term.setTextColor(colors[settings.menuInactive] or colors.lightGray)
	write(langStrings.emilos_search)
	term.setTextColor(colors[settings.menuText] or colors.black)
	term.setCursorPos(13,3)
	term.setCursorBlink(true)
	ClockID = os.startTimer(0.2)
	while true do
		local e, par1, par2, par3, par4 = framework.eventHandler()
		if e == "char" then
			if searchString == "" then
				paintutils.drawLine(11,3,42,3,colors[settings.topBarColor] or colors.white)
				term.setCursorPos(13,3)
			end
			searchString = searchString..par1
			term.setCursorPos(13,3)
			term.setTextColor(colors[settings.menuText] or colors.black)
			if searchString:len() > 27 then
				write(string.sub(searchString,searchString:len() - 27,searchString:len()))
				term.setCursorPos(40,3)
			else
				write(searchString)
				term.setCursorPos(13 + searchString:len(),3)
			end
			findMatches(appList,searchString)
		elseif e == "key" then
			if par1 == 14 then
				if searchString:len() > 1 then
					searchString = string.sub(searchString,1,searchString:len() - 1)
				else
					searchString = ""
				end
				paintutils.drawLine(11,3,42,3,colors[settings.topBarColor] or colors.white)
				term.setCursorPos(13,3)
				if searchString:len() > 27 then
					write(string.sub(searchString,searchString:len() - 27,searchString:len()))
					term.setCursorPos(40,3)
				else
					write(searchString)
					term.setCursorPos(13 + searchString:len(),3)
				end
				if searchString == "" then
					term.setTextColor(colors[settings.menuInactive] or colors.lightGray)
					write(langStrings.emilos_search)
					for i=1,6 do
						paintutils.drawLine(11,4 + i,42,4 + i,colors[settings.topBarColor] or colors.white)
					end
					term.setCursorPos(13,3)
				else
					findMatches(appList,searchString)
				end
			elseif par1 == 28 then
				if returnList[1] then
					term.setCursorBlink(false)
					paintutils.drawLine(1,5,51,5,colors[settings.menuHighlight] or colors.lightBlue)
					term.setTextColor(colors.white)
					term.setCursorPos(13,5)
					if returnList[1] == "settings" then
						write(langStrings.settings_appname)
					elseif returnList[1] == "appStore" then
						write(langStrings.appstore_appname)
					else
						write(returnList[1])
					end
					sleep(0.2)
					if fs.exists("Apps/"..returnList[1]) then
						local appManifest = framework.getManifest(returnList[1])
						if runningProgramName and runningProgramName == returnList[1] then
							os.queueEvent("mouse_click",1,1,19)
						else
							programWindow = window.create(term.current(),1,19,51,19)
							term.redirect(programWindow)
							currentRunningThread = coroutine.create(function() shell.run("/Apps/"..returnList[1].."/"..appManifest.launchScript) end)
							coroutine.resume(currentRunningThread)
							term.redirect(thisWindow)
							for i=19,1,-3 do
								sleep(0.001)
								programWindow.reposition(1,i)
							end
							programFocused = true
							runningProgramName = returnList[1]
						end
						appsWindow.reposition(1,2)
						term.setCursorBlink(false)
					elseif fs.exists("System/Apps/"..returnList[1]) then
						if returnList[1] == langStrings.settings_appname then
							launchSystemApp.settings()
						elseif returnList[1] == langStrings.appstore_appname then
							launchSystemApp.appStore()
						elseif returnList[1] == langStrings.emilosmenu_shell then
							launchSystemApp.shell()
						end
						appsWindow.reposition(1,2)
					else
						if returnList[1] == "CD" then
							os.queueEvent("mouse_click",1,49,1)
						elseif returnList[1] == langStrings.emilosmenu_reboot then
							if emilworks.popupMsg(colors.lime,"6","",langStrings.emilos_rebootnow) then
								os.reboot()
							end
						elseif returnList[1] == langStrings.emilosmenu_shutdown then
							if emilworks.popupMsg(colors.lime,"6","",langStrings.emilos_shutdownnow) then
								os.shutdown()
							end
						end
						appsWindow.reposition(1,2)
					end
					exitedProgram = true
					drawMain()
					ClockID = os.startTimer(0.2)
					break
				end
			elseif par1 == 15 then
				term.setCursorBlink(false)
				if not settings.noAnim then
					for i=10,4,-2 do
						appsWindow.reposition(1,i)
						sleep(0.05)
					end
				end
				appsWindow.reposition(1,2)
				drawMainBar()
				drawClock()
				break
			end
		elseif e == "mouse_click" then
			if par2 >= 11 and par2 <= 42 and par3 >= 3 and par3 <= 10 then
				if par3 == 5 then
					os.queueEvent("key",28)
				end
			else
				term.setCursorBlink(false)
				if not settings.noAnim then
					for i=10,4,-2 do
						appsWindow.reposition(1,i)
						sleep(0.05)
					end
				end
				appsWindow.reposition(1,2)
				drawMainBar()
				drawClock()
				if par3 == 1 and par2 ~= 26 then
					os.queueEvent("mouse_click",1,par2,1)
				end
				break
			end
		elseif e == "disk" or e == "disk_eject" then
			getInstalledApps()
			drawApps(true)
			appList = {}
			for k,v in pairs(loadedApps) do
				table.insert(appList,v)
			end
			term.setCursorPos(13 + searchString:len(),3)
		elseif e == "timer" and par1 == ClockID then
			drawClock()
			term.setCursorPos(13 + searchString:len(),3)
			term.setTextColor(colors[settings.menuText] or colors.black)
		end
	end
	drawMain()
end
local function handleDiskEvent(side)
	if disk.isPresent(side) then
		if not disk.hasAudio(but) then
			table.insert(loadedApps,"Disk")
			if fs.exists("/disk/autorun") then
				if emilworks.popupMsg(colors.lime,"6","",langStrings.emilos_autorundisk1,langStrings.emilos_autorundisk2,langStrings.emilos_autorundisk3) then
					shell.run("/disk/autorun")
				end
			end
		else
			table.insert(loadedApps,"CD")
		end
		getInstalledApps()
		drawApps(true)
	else
		for i=1,#loadedApps do
			if loadedApps[i] == "Disk" or loadedApps[i] == "CD" then
				table.remove(loadedApps,i)
			end
		end
		getInstalledApps()
		drawApps(true)
	end
	if currentRunningThread then
		programWindow.redraw()
	end
end
local function handleAppClickEvent()
	if selectedAppBut == 2 and selectedApp ~= "CD" then
		showContext()
	elseif selectedApp == "CD" then
		nSidebarPage = 3
		os.queueEvent("mouse_click",1,50,1)
	elseif selectedApp ~= "Disk" then
		framework.clearPopup()
		local appManifest = framework.getManifest(selectedApp)
		if runningProgramName and runningProgramName == selectedApp then
			os.queueEvent("mouse_click",1,1,19)
		else
			programWindow = window.create(term.current(),1,19,51,19)
			term.redirect(programWindow)
			currentRunningThread = coroutine.create(function() shell.run("/Apps/"..selectedApp.."/"..appManifest.launchScript) end)
			coroutine.resume(currentRunningThread)
			term.redirect(thisWindow)
			if not settings.noAnim then
				for i=19,1,-3 do
					sleep(0.001)
					programWindow.reposition(1,i)
				end
			end
			programWindow.reposition(1,1)
			programFocused = true
			runningProgramName = selectedApp
		end
		term.setCursorBlink(false)
	end
	clicked = true
end
local function addSystemApp(object)
	term.redirect(object.containerWindow)
	paintutils.drawLine(1,1,object.containerWindow.getSize(),1,colors[settings.topBarColor] or colors.white)
	term.setCursorPos(3,1)
	term.setTextColor(colors[settings.topBarTextColor] or colors.black)
	write(object.name)
	term.setCursorPos(object.containerWindow.getSize() - 2,1)
	write("x")
	term.redirect(object.appWindow)
	coroutine.resume(object.coroutine)
	term.redirect(thisWindow)
	table.insert(floatingSystemApps,object)
end

local launchSystemApp = {
	settings = function()
		local settingsCoroutine = coroutine.create(function() shell.run("/System/Apps/settings2.lua") end)
		local settingsWindowContainer = window.create(term.current(),2,3,30,16)
		local settingsWindow = window.create(settingsWindowContainer,1,2,30,15)
		addSystemApp({
			["coroutine"] = settingsCoroutine,
			["containerWindow"] = settingsWindowContainer,
			["appWindow"] = settingsWindow,
			["order"] = 1,
			["name"] = langStrings.emilosmenu_settings,
			["id"] = math.random(),
			["isFocused"] = false,
		})
		settingsCoroutine, settingsWindowContainer, settingsWindow = nil, nil, nil
	end,
	appStore = function()
		local appStoreCoroutine = coroutine.create(function() shell.run("/System/Apps/appStore") end)
		local appStoreWindowContainer = window.create(term.current(),1,2,51,18)
		local appStoreWindow = window.create(appStoreWindowContainer,1,2,51,17)
		addSystemApp({
			["coroutine"] = appStoreCoroutine,
			["containerWindow"] = appStoreWindowContainer,
			["appWindow"] = appStoreWindow,
			["order"] = 1,
			["name"] = langStrings.emilosmenu_appstore,
			["id"] = math.random(),
			["isFocused"] = false,
		})
		appStoreCoroutine, appStoreWindowContainer, appStoreWindow = nil, nil, nil
	end,
	shell = function()
		local shellCoroutine = coroutine.create(function() shell.run("/rom/programs/shell") end)
		local shellWindowContainer = window.create(term.current(),2,3,30,12)
		local shellWindow = window.create(shellWindowContainer,1,2,30,11)
		addSystemApp({
			["coroutine"] = shellCoroutine,
			["containerWindow"] = shellWindowContainer,
			["appWindow"] = shellWindow,
			["order"] = 1,
			["name"] = langStrings.emilosmenu_shell,
			["id"] = math.random(),
			["isFocused"] = false,
		})
		shellCoroutine, shellWindowContainer, shellWindow = nil, nil, nil
	end
}

_G.customFunctions.EmilOS_UpdateFound = function()
	shell.run("System/Apps/appStore System")
end

 -- On boot screen draw
getInstalledApps()
drawMain()
ClockID = os.startTimer(0.2)

 -- Main loop
while true do
	if clicked then
		drawMain()
		ClockID = os.startTimer(0.2)
		clicked = false
	end
	event = {framework.eventHandler()}
	e, but, cx, cy = event[1], event[2], event[3], event[4]
	if not programFocused then
		local relayToSystemApp = true
		if e == "mouse_click" or e == "key" then
			if e == "key" then
				cx, cy = 0, 0
				if but == keys.left and appListNum ~= 10 then
					appListNum = appListNum - 10
					exitedProgram = true
					drawApps()
				elseif but == keys.right and #loadedApps > appListNum then
					appListNum = appListNum + 10
					exitedProgram = true
					drawApps()
				end
			end
			if cx >= 3 and cx <= 8 and cy == 1 or e == "key" and but == keys.leftCtrl then
				if _G.bPopup then
					drawMain()
				end
				wasMenu = true
				term.setCursorPos(2,1)
				term.setBackgroundColor(colors[settings.menuHighlight] or colors.lightBlue)
				term.setTextColor(colors.white)
				write(" EmilOS ")
				cB = framework.menu({langStrings.emilosmenu_about,"br",langStrings.emilosmenu_settings,langStrings.emilosmenu_appstore,langStrings.emilosmenu_shell,"br",langStrings.emilosmenu_reboot,langStrings.emilosmenu_shutdown},nil,true)
				if cB == 1 then
					local pText = nil
					if _CC_VERSION then
						pText = "ComputerCraft ".._CC_VERSION
					elseif _HOST then
						pText = string.sub(_HOST,1,18)
					else
						pText = "("..os.version()..")"
					end
					emilworks.popupMsg(colors.lime,"3","","EmilOS "..versionText,pText,"","(c) 2016 Emil Inc.")
					parallel.waitForAny(function() os.pullEvent("mouse_click") end,function() os.pullEvent("key") end)
				elseif cB == 3 then
					launchSystemApp.settings()
				elseif cB == 4 then
					launchSystemApp.appStore()
				elseif cB == 5 then
					launchSystemApp.shell()
				elseif cB == 7 then
					if emilworks.popupMsg(colors.lime,"6","",langStrings.emilos_rebootnow) == true then
						os.queueEvent("reboot")
						return
					end
				elseif cB == 8 then
					if emilworks.popupMsg(colors.lime,"6","",langStrings.emilos_shutdownnow) == true then
						os.queueEvent("shutdown")
						return
					end
				end
				clicked = true
				relayToSystemApp = false
			elseif cx == 11 and cy == 1 then
				term.setCursorPos(10,1)
				term.setBackgroundColor(colors[settings.menuHighlight] or colors.lightBlue)
				term.setTextColor(colors.white)
				write(" - ")
				sleep(0.2)
				_G.EmilOSServerUnreachable = false
				if not isGettingData then
					framework.httpRequest("http://"..settings.serverUrl.."/EmilOSScript.php","request=GetAppList1")
				end
				ClockID = os.startTimer(1)
				drawMainBar()
				relayToSystemApp = false
			elseif cx == 47 and cy == 1 or e == "key" and but == 15 then
				term.setCursorPos(46,1)
				term.setBackgroundColor(colors[settings.menuHighlight] or colors.lightBlue)
				term.setTextColor(colors.white)
				write(" "..string.char(12).." ")
				showSearchBar()
				relayToSystemApp = false
			elseif cx == 50 and cy == 1 or e == "key" and but == 157 then
				if _G.bPopup then
					drawApps()
					_G.bPopup = false
				end
				term.setCursorPos(49,1)
				term.setBackgroundColor(colors[settings.menuHighlight] or colors.lightBlue)
				term.setTextColor(colors.white)
				write(" = ")
				openSidebar()
				ClockID = os.startTimer(1)
				while true do
					e, but, cx, cy = framework.eventHandler()
					if e == "mouse_click" then
						if cx >= 37 then
							if cy == 1 and cx <= 48 then
								local sidebarFirsttime = true
								if not settings.noAnim then
									for i=-12,0,2 do
										if sidebarFirsttime then
											sidebarFirsttime = false
										else
											sleep(0.05)
										end
										appsWindow.reposition(i,2)
									end
								end
								appsWindow.reposition(1,2)
								os.queueEvent("mouse_click",1,cx,1)
								break
							elseif cx == 41 and cy == 18 then
								nSidebarPage = 1
								openSidebar(true)
							elseif cx == 44 and cy == 18 then
								nSidebarPage = 2
								openSidebar(true)
							elseif cx == 47 and cy == 18 then
								nSidebarPage = 3
								openSidebar(true)
							elseif cx == 50 and cy == 3 and nSidebarPage == 1 and currentMessages[1] ~= nil then
								messages[currentMessages[1]] = nil
								currentMessages[1] = nil
								framework.messageHandler("save")
								openSidebar(true)
							elseif cx == 50 and cy == 8 and nSidebarPage == 1 and currentMessages[2] ~= nil then
								messages[currentMessages[2]] = nil
								currentMessages[2] = nil
								framework.messageHandler("save")
								openSidebar(true)
							elseif cx == 50 and cy == 13 and nSidebarPage == 1 and currentMessages[3] ~= nil then
								messages[currentMessages[3]] = nil
								currentMessages[3] = nil
								framework.messageHandler("save")
								openSidebar(true)
							elseif cx >= 37 and cx <= 51 and cy == modemPosY and nSidebarPage == 2 then
								for k,v in pairs(rs.getSides()) do
									if peripheral.getType(v) == "modem" then
										if rednet.isOpen(v) then
											rednet.close(v)
										else
											rednet.open(v)
										end
									end
								end
								openSidebar(true)
							elseif cx == 40 and cy == 7 and cdIsPresent then
								disk.playAudio(cdIsPresent)
							elseif cx == 44 and cy == 7 and cdIsPresent then
								disk.stopAudio(cdIsPresent)
							elseif cx == 48 and cy == 7 and cdIsPresent then
								disk.eject(cdIsPresent)
								cdIsPresent = nil
								openSidebar(true)
							end
						else
							local sidebarFirsttime = true
							if not settings.noAnim then
								for i=-12,0,2 do
									if sidebarFirsttime then
										sidebarFirsttime = false
									else
										sleep(0.05)
									end
									appsWindow.reposition(i,2)
								end
							end
							appsWindow.reposition(1,2)
							if cy == 1 then
								os.queueEvent("mouse_click",but,cx,cy)
							end
							relayToSystemApp = false
							break
						end
					elseif e == "peripheral" or e == "peripheral_detach" or e == "disk" or e == "disk_eject" then
						if e == "peripheral" then
							if peripheral.getType(but) == "modem" and settings.openRednetOnBoot then
								rednet.open(but)
							end
						end
						if nSidebarPage >= 2 then
							openSidebar(true)
						end
						if e == "disk" then
							if disk.hasAudio(but) then
								table.insert(loadedApps,"CD")
							else
								table.insert(loadedApps,"Disk")
							end
							drawApps(true)
						elseif e == "disk_eject" then
							for i=1,#loadedApps do
								if loadedApps[i] == "Disk" or loadedApps[i] == "CD" then
									table.remove(loadedApps,i)
									cdIsPresent = nil
									drawApps(true)
								end
							end
						end
					elseif e == "timer" and but == ClockID then
						drawClock()
					elseif e == "key" then
						if but == 157 then
							local sidebarFirsttime = true
							if not settings.noAnim then
								for i=-12,0,2 do
									if sidebarFirsttime then
										sidebarFirsttime = false
									else
										sleep(0.05)
									end
									appsWindow.reposition(i,2)
								end
							end
							appsWindow.reposition(1,2)
							break
						elseif but == keys.right or but == keys.left then
							if but == keys.right then
								if nSidebarPage < 3 then
									nSidebarPage = nSidebarPage + 1
								end
							else
								if nSidebarPage > 1 then
									nSidebarPage = nSidebarPage - 1
								end
							end
							openSidebar(true)
						end
					elseif but == keys.delete and nSidebarPage == 1 then
						if multishell.getCount() > 1 then
							os.queueEvent("mouse_click",1,50,4)
						else
							os.queueEvent("mouse_click",1,50,3)
						end
					end
				end
				clicked = true
				relayToSystemApp = false
			elseif cy == 19 and currentRunningThread and not programFocused then
				if not settings.noAnim then
					for i=19,1,-3 do
						programWindow.reposition(1,i)
						sleep(0.001)
					end
				end
				programWindow.reposition(1,1)
				programFocused = true
				relayToSystemApp = false
			elseif cx == 1 and cy == 10 and appListNum ~= 10 then
				appListNum = appListNum - 10
				exitedProgram = true
				drawApps()
				relayToSystemApp = false
			elseif cx == 51 and cy == 10 and #loadedApps > appListNum then
				appListNum = appListNum + 10
				exitedProgram = true
				drawApps()
				relayToSystemApp = false
			else
				for i=1,#currentAppList do
					if cx >= appX[i] and cx <= appX[i] + 2 and cy >= 4 and cy <= 7 and i <= 5 then
						selectedApp = currentAppList[i]
						selectedAppBut = but
					elseif cx >= appX[i] and cx <= appX[i] + 2 and cy >= 12 and cy <= 15 and i >= 6 and not clicked then
						selectedApp = currentAppList[i]
						selectedAppBut = but
					end
				end
			end
		elseif e == "timer" and but == ClockID then
			drawClock()
			relayToSystemApp = false
		elseif e == "framework_redraw" then
			drawApps()
		elseif e == "framework_fullRedraw" or e == "term_resize" then
			drawMain()
		elseif e == "frameworkCloseProgram" then
			if multishell then
				if multishell.getCount() == 1 then
					exitedProgram = true
					drawMain()
				end
			end
		elseif e == "peripheral" then
			if peripheral.getType(but) == "modem" and settings.openRednetOnBoot then
				rednet.open(but)
			end
		elseif e == "disk" or e == "disk_eject" then
			handleDiskEvent(but)
		elseif e == "http_success" and but == "http://"..settings.serverUrl.."/EmilOSScript.php" then
			drawMainBar()
			local versionTable = textutils.unserialize(cx.readAll())
			if tonumber(versionTable.System) > version then
				framework.message("EmilOS",langStrings.message_update,langStrings.message_found,true,"EmilOS_UpdateFound")
			elseif tonumber(versionTable.System) < version then
				framework.message("EmilOS",langStrings.message_usingbeta,version,true,"System/Apps/appStore System","EmilOS_UpdateFound")
				_G.EmilOSBeta = true
				isRunningBeta = true
			end
			relayToSystemApp = false
		elseif e == "http_failure" and but == "http://"..settings.serverUrl.."/EmilOSScript.php" then
			_G.EmilOSServerUnreachable = true
			drawMainBar()
			framework.message("EmilOS",langStrings.message_servernot,langStrings.message_unreachable,true)
			relayToSystemApp = false
		elseif e == "EmilOS_ReloadSettings" then
			settings = framework.getSettings()
			drawApps(true)
			if currentRunningThread then
				term.redirect(programWindow)
				coroutine.resume(currentRunningThread,"EmilOS_ReloadSettings")
				term.redirect(thisWindow)
			end
			if #floatingSystemApps > 0 then
				for k,v in pairs(floatingSystemApps) do
					term.redirect(v.containerWindow)
					paintutils.drawLine(1,1,v.containerWindow.getSize(),1,colors[settings.topBarColor] or colors.white)
					term.setCursorPos(3,1)
					term.setTextColor(colors[settings.topBarTextColor] or colors.black)
					write(v.name)
					term.setCursorPos(v.containerWindow.getSize() - 2,1)
					write("x")
					term.redirect(thisWindow)
				end
			end
		elseif e == "terminate" then
			os.queueEvent("shutdown")
			return
		end
		
		pcall(function()
			local sendCallToAppList = true
			for k,v in pairs(floatingSystemApps) do
				if coroutine.status(v.coroutine) ~= "dead" then
					local windowX, windowY = v.containerWindow.getPosition()
					local windowSizeX, windowSizeY = v.containerWindow.getSize()
					if string.sub(event[1],1,5) == "mouse" then
						if cx >= windowX and cx <= windowX + windowSizeX - 1 and cy >= windowY and cy <= windowY + windowSizeY - 1 then
							if v.isFocused then
								for k2,v2 in pairs(floatingSystemApps) do
									v2.isFocused = false
								end
								v.isFocused = true
								sendCallToAppList = false
								if cy == windowY then
									if e == "mouse_click" then
										if cx == windowX + windowSizeX - 3 then
											term.redirect(v.appWindow)
											pcall(coroutine.resume,v.coroutine,"terminate")
											term.redirect(thisWindow)
										else
											local dragOffset = cx - windowX
											while true do
												local event = {os.pullEvent()}
												if event[1] == "mouse_drag" then
													if event[4] == 1 then
														event[4] = 2
													end
													v.containerWindow.reposition(event[3] - dragOffset,event[4])
													sendToProgram = false
													drawMain()
													for k2,v2 in pairs(floatingSystemApps) do
														v.containerWindow.redraw()
													end
													v.containerWindow.redraw()
												elseif event[1] == "timer" and event[2] == ClockID then
													drawClock()
												elseif event[1] == "mouse_up" then
													break
												end
											end
										end
									end
								elseif cx == windowX + windowSizeX - 1 and cy == windowY + windowSizeY - 1 then
									while true do
										local event = {os.pullEvent()}
										if event[1] == "mouse_drag" then
											if event[3] - windowX + 1 > 4 and event[4] - windowY + 1 > 4 then
												v.containerWindow.reposition(windowX,windowY,event[3] - windowX + 1,event[4] - windowY + 1)
												v.appWindow.reposition(1,2,event[3] - windowX + 1,event[4] - windowY)
												local newSizeX = v.containerWindow.getSize()
												term.redirect(v.containerWindow)
												paintutils.drawLine(1,1,newSizeX,1,colors[settings.topBarColor] or colors.white)
												term.setTextColor(colors[settings.topBarTextColor] or colors.black)
												term.setCursorPos(3,1)
												write(v.name)
												term.setCursorPos(newSizeX - 2,1)
												write("x")
												term.redirect(v.appWindow)
												pcall(coroutine.resume,v.coroutine,"term_resize")
												term.redirect(thisWindow)
												term.redirect(thisWindow)
												sendToProgram = false
												drawMain()
												for k2,v2 in pairs(floatingSystemApps) do
													v.containerWindow.redraw()
												end
												v.containerWindow.redraw()
											end
										elseif event[1] == "timer" and event[2] == ClockID then
											drawClock()
										elseif event[1] == "mouse_up" then
											break
										end
									end
								else
									event[3] = event[3] - windowX + 1
									event[4] = event[4] - windowY
									term.redirect(v.appWindow)
									pcall(coroutine.resume,v.coroutine,table.unpack(event))
									term.setCursorBlink(false)
									term.redirect(thisWindow)
								end
							else
								v.isFocused = true
							end
						end
					else
						if relayToSystemApp and v.isFocused then
							term.redirect(v.appWindow)
							pcall(coroutine.resume,v.coroutine,table.unpack(event))
							term.setCursorBlink(false)
							term.redirect(thisWindow)
						end
					end
				else
					for i=1,#floatingSystemApps do
						if floatingSystemApps[i]["id"] == v.id then
							floatingSystemApps[i] = nil
							break
						end
					end
				end
			end
			drawMain()
			if event[1] == "timer" and event[2] == ClockID then
				drawClock()
			end
			if sendCallToAppList then
				handleAppClickEvent()
			end
			selectedApp, selectedAppBut = nil, nil
		end)
	else
		if coroutine.status(currentRunningThread) == "dead" then
			programFocused = false
			if not settings.noAnim then
				for i=1,19,3 do
					programWindow.reposition(1,i)
					drawMain(true)
					sleep(0.001)
				end
			end
			programWindow.reposition(1,19)
			currentRunningThread = nil
			programWindow = nil
			runningProgramName = nil
			drawClock()
			drawMain()
		else
			if e == "disk" or e == "disk_eject" then
				handleDiskEvent(but)
				programWindow.redraw()
			end
			if e == "EmilOS_MinimizeProgram" then
				programFocused = false
				if not settings.noAnim then
					for i=1,19,3 do
						programWindow.reposition(1,i)
						drawMain(true)
						sleep(0.001)
					end
				end
				programWindow.reposition(1,19)
				drawClock()
				drawMain()
			else
				term.redirect(programWindow)
				coroutine.resume(currentRunningThread,table.unpack(event))
				term.redirect(thisWindow)
			end
		end
	end
end
